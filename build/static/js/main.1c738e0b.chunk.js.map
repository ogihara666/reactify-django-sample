{"version":3,"sources":["components/FillingCell.js","components/BlankCell.js","components/ScheduleCell.js","components/ScheduleHeader.js","components/ClockLine.js","components/ScheduleRow.js","actions/api_actions.js","components/RoomChoice.js","components/TimeSelect.js","components/ScheduleTimeRow.js","containers/PostForm.js","containers/Schedules.js","actions/types.js","actions/form_actions.js","actions/general_action.js","App.js","serviceWorker.js","reducers/apiReducers.js","reducers/formReducers.js","reducers/generalReducers.js","reducers/index.js","store.js","Root.js","index.js"],"names":["FillingCell","props","schedule","cellWidth","react_default","a","createElement","class","key","style","height","concat","cellHeight","ListItem_default","button","width","margin","padding","backgroundColor","borderRadius","boxSizing","zIndex","onClick","clickAction","uuid","userName","content","BlankCell","index","targetDatetime","time","ScheduleCell","components_BlankCell","postEvent","components_FillingCell","editEvent","ScheduleHeader","roomId","ClockLine","top","ScheduleRow","fillingList","i","push","scheduleList","Number","components_ScheduleHeader","components_ClockLine","map","components_ScheduleCell","timeList","urlBase","_getFromDate","datetime","targetDate","moment","url","format","console","log","fetch","method","then","response","ok","Error","statusText","responseData","json","_parseSchedules","schedulesArray","schedulesLocal","1","2","3","4","5","6","7","8","data","startTime","endTime","roomIds","sort","verticalStart","Math","floor","RoomChoice","roomChoiceArray","choiceElements","Fragment","type","name","id","value","for","elem","TimeSelect","initialValue","selected","ScheduleTimeRow","Component","Schedules","_this","this","setInterval","fetchAllSchedules","targetYear","targetMonth","updateTime","_this2","roomIdArray","components_ScheduleTimeRow","components_ScheduleRow","schedules","selectSchedule","selectBlank","connect","state","api","currentHour","general","currentMinute","dispatch","payload","headers","Content-Type","String","start_time","end_time","user_name","created","edited","room_ids","roomSelected","indexOf","_constructRoomSelected","isoWeekday","year","month","date","hour","minute","toToday","today","App","containers_Schedules","Boolean","window","location","hostname","match","initialState","roomTouched","scheduleTouched","formVisible","editing","insertSchedule","currentYear","currentMonth","currentDate","currentDay","targetDay","parseDayToJa","Day","combineReducers","arguments","length","undefined","action","form","stateNext","Object","assign","target","k","v","splice","roomIdsEditing","indexEditing","nextState","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","Root","es","children","ReactDOM","render","src_Root","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1c738e0b.chunk.js","sourcesContent":["import React from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\n\nconst FillingCell = props => {\n  if (props.schedule.cellWidth == 0) {\n    return (\n      <div\n        class=\"cell-under\"\n        key={props.key}\n        style={{\n          height: `${props.schedule.cellHeight * 5 +\n            props.schedule.cellHeight * 0.1}rem`\n        }}\n      />\n    );\n  } else if (props.schedule.cellHeight == 0) {\n    return <div />;\n  } else {\n    return (\n      <ListItem\n        button\n        key={props.key}\n        style={{\n          width: `${props.schedule.cellWidth * 100}%`,\n          margin: 0,\n          padding: 0,\n          backgroundColor: \"#00b8d4\",\n          borderRadius: \"0.4rem\",\n          boxSizing:\"border-box\",\n          \n        }}\n      >\n        <div\n          class=\"li-fillingCell\"\n          style={{\n            height: `${props.schedule.cellHeight * 5}rem`,\n            zIndex: 1\n          }}\n          onClick={() => {\n            props.clickAction(props.schedule.uuid);\n          }}\n        >\n          {props.schedule.userName}\n          <br />「{props.schedule.content}」\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default FillingCell;\n","import React from \"react\";\nimport ListItem from '@material-ui/core/ListItem';\nconst BlankCell=(props)=>{\n    if(props.index%2==0){\n        return (\n            <ListItem\n            style={{width:\"100%\",margin:0,padding:0}}\n            button\n            onClick={()=>props.clickAction(`${props.targetDatetime} ${props.time}`)}\n          key={props.index}\n        ><div class=\"li-blankCell box-even-black\">\n\n        </div>\n        </ListItem>\n        )\n    }else{\n        return(\n<ListItem\n            style={{width:\"100%\",margin:0,padding:0}}\n            button\n            onClick={()=>props.clickAction(`${props.targetDatetime} ${props.time}`)}\n          key={props.index}\n        ><div class=\"li-blankCell box-odd-black\">\n\n        </div>\n        </ListItem>\n        )\n    }\n    \n}\nexport default BlankCell;","import React from 'react';\nimport FillingCell from './FillingCell';\nimport BlankCell from './BlankCell';\n\n\nconst ScheduleCell =(props)=>{\n    if(props.schedule==false){\n        return(<BlankCell key={props.index} index={props.index} clickAction={props.postEvent} time={props.time} targetDatetime={props.targetDatetime}/>)\n    }else{\n        return(<FillingCell key={props.index} schedule={props.schedule} index={props.index} clickAction={props.editEvent}/>)\n    }\n}\n\nexport default ScheduleCell;","import React from \"react\";\n\nconst ScheduleHeader =(props) =>{\n    return (\n        <div class=\"box-scheduleHeader\">\n        <div class=\"item-scheduleHeader\">会議室{props.roomId}</div>\n        </div>\n    )\n}\nexport default ScheduleHeader;","import React from \"react\";\n\nconst ClockLine = (props)=>{\n    return(\n        <div class=\"box-clockLine\" style={{top:`${props.top}rem`}}></div>\n    )\n}\nexport default ClockLine;","import React from \"react\";\nimport ScheduleCell from \"./ScheduleCell\";\nimport ScheduleHeader from \"./ScheduleHeader\";\nimport ClockLine from \"./ClockLine\";\n\nconst ScheduleRow = props => {\n  const fillingList = [];\n  for (let i = 1; i <= 49; i++) {\n    fillingList.push(false);\n  }\n  const scheduleList = props.scheduleList;\n  for (let key in scheduleList) {\n    fillingList[key] = scheduleList[key];\n    if (scheduleList[key].cellHeight > 1) {\n      for (let i = 1; i < scheduleList[key].cellHeight; i++) {\n        fillingList[Number(key) + i] = {\n          cellHeight: 0\n        };\n      }\n    }\n  }\n  return (\n    <ul class=\"box-scheduleRow\">\n      <ScheduleHeader roomId={props.roomId} />\n      <ClockLine top={20} />\n      {fillingList.map((schedule, index) => {\n        return (\n          <ScheduleCell\n            schedule={schedule}\n            key={index}\n            index={index}\n            editEvent={props.editEvent}\n            postEvent={props.postEvent}\n            time={props.timeList[index]}\n            targetDatetime={props.targetDatetime}\n          />\n        );\n      })}\n    </ul>\n  );\n};\nexport default ScheduleRow;\n","import {\n  SELECT_DATE,\n  REQUEST_DELETE,\n  SEND_PATCH,\n  SEND_POST,\n  FETCH_ALL_SCHEDULES\n} from \"./types\";\nimport moment from 'moment';\n\n//import moment from \"moment\";\n\nconst urlBase = \"http://35.211.249.14/\";\nconst headers = {\n  \"Content-Type\": \"application/json\"\n};\n\nexport const fetchAllSchedules = datetime => dispatch => {\n  // データ取得\n  _getFromDate(datetime).then(responseData => {\n    const schedulesLocal = _parseSchedules(responseData[\"schedules\"]);\n    dispatch({\n      type: FETCH_ALL_SCHEDULES,\n      payload: schedulesLocal\n    });\n  });\n};\nexport const sendPatch = patchData => dispatch => {\n  const body = JSON.stringify({\n    schedules: {\n      uuid: patchData.uuid,\n      content: patchData.content,\n      user_name: patchData.userName,\n      room_ids: patchData.roomIds,\n      start_time: patchData.startTime,\n      end_time: patchData.endTime\n    }\n  });\n  const url = urlBase + \"reserves\";\n\n  fetch(url, { method: \"PUT\", headers: headers, body: body })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(\n      dispatch({\n        type: SEND_PATCH,\n        payload: {}\n      })\n    );\n};\nexport const requestDelete = uuid => dispatch => {\n  const url = urlBase + \"reserves\";\n  const body = JSON.stringify({ uuid: uuid });\n  fetch(url, { method: \"DELETE\", headers: headers, body: body })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(\n      dispatch({\n        type: REQUEST_DELETE,\n        payload: {}\n      })\n    );\n  return;\n};\nconst _constructInsertSchedules = postData => {\n  const roomIds = postData.roomIds;\n  const insertSchedules = [];\n  const schedule = {\n    room_ids: postData.roomIds,\n    user_name: postData.userName,\n    content: postData.content,\n    start_time: postData.startTime,\n    end_time: postData.endTime,\n    room_ids: []\n  };\n  for (let index in roomIds) {\n    if (index == 0) {\n      // 一番目は比べようがないのでそのまま追加\n      schedule.room_ids.push(roomIds[index]);\n    } else {\n      // 連続値ならそのまま追加\n      if (roomIds[index - 1] + 1 == roomIds[index]) {\n        schedule.room_ids.push(roomIds[index]);\n      } else {\n        // そうでない場合これまでの予定を配列に格納し\n        // room_idsキーの値を初期化\n        insertSchedules.push(Object.assign({}, schedule));\n        schedule.room_ids = [roomIds[index]];\n      }\n    }\n  }\n  // 最後のscheduleオブジェクトはループの追加から外れているので追加\n  insertSchedules.push(schedule);\n  return insertSchedules;\n};\nexport const sendPost = postData => dispatch => {\n  const insertSchedules = _constructInsertSchedules(postData);\n  console.log(insertSchedules);\n  const body = JSON.stringify({ insert_schedules: insertSchedules });\n  const url = urlBase + \"reserves\";\n  \n  fetch(url, { method: \"POST\", headers: headers, body: body })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => {\n      // うまくPOSTできたらもう一度読み込みを行う\n      _getFromDate(postData.startTime).then(responseData => {\n        const schedulesLocal = _parseSchedules(responseData[\"schedules\"]);\n        dispatch({\n          type: SEND_POST,\n          payload: schedulesLocal\n        });\n      });\n    })\n    .catch(error => {\n      alert(error);\n    });\n};\n\nconst _getFromDate = datetime => {\n  // APIにアクセスして特定の日時のデータを取得\n  const targetDate = moment(datetime);\n  const url =\n    urlBase +\n    `reserves/${targetDate.format(\"YYYY\")}/${targetDate.format(\n      \"MM\"\n    )}/${targetDate.format(\"DD\")}`;\n    console.log(url);\n  return fetch(url, { method: \"GET\" })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(responseData => {\n      return responseData.json();\n    });\n};\n\nconst _parseSchedules = schedulesArray => {\n  const schedulesLocal = {\n    1: {},\n    2: {},\n    3: {},\n    4: {},\n    5: {},\n    6: {},\n    7: {},\n    8: {}\n  };\n  for (let index in schedulesArray) {\n    // 開始時間と終了時間からセルのサイズを算出する\n    let data = schedulesArray[index];\n    let uuid = data[\"uuid\"];\n    let userName = data[\"user_name\"];\n    let content = data[\"content\"];\n    let startTime = moment(data[\"start_time\"]);\n    let endTime = moment(data[\"end_time\"]);\n    let roomIds = data[\"room_ids\"].sort();\n    let cellWidth = data[\"cell_width\"];\n    let cellHeight = data[\"cell_height\"];\n\n    let verticalStart =\n      Number(startTime.format(\"HH\")) * 2 +\n      Math.floor(Number(startTime.format(\"mm\")) / 30);\n    for (let index in roomIds) {\n      let roomId = roomIds[index];\n      schedulesLocal[roomId][verticalStart] = {\n        uuid: uuid,\n        roomId: roomId,\n        startTime: startTime,\n        endTime: endTime,\n        userName: userName,\n        content: content,\n        cellHeight: cellHeight\n      };\n      // 一度目のiteration以外0になる\n      schedulesLocal[roomId][verticalStart].cellWidth = cellWidth;\n      cellWidth = 0;\n    }\n  }\n  return schedulesLocal;\n};\n","import React from \"react\";\n\n\nconst RoomChoice =(props)=>{\n    const roomChoiceArray = {\n        1:\"会議室1\",\n        2:\"会議室2\",\n        3:\"会議室3\",\n        4:\"会議室4\",\n        5:\"会議室5\",\n        6:\"会議室6\",\n        7:\"会議室7\",\n        8:\"会議室8\",\n\n}\nconst choiceElements = []\nfor(let i in roomChoiceArray){\n    choiceElements.push(\n        <React.Fragment>\n        <input type=\"checkbox\" name=\"room-choice\" id={`room-choice-${i}`} value={i}/>\n        <label for={`room-choice-${i}`}>{roomChoiceArray[i]}</label>\n        </React.Fragment>\n    )\n\n}\n    return(\n        <div>\n            {choiceElements.map((elem)=>{\n                return(elem);\n            })}\n        </div>\n    )\n}\n\nexport default RoomChoice;","import React from \"react\";\n\nconst TimeSelect = props => {\n  return (<select name={`time-select-${props.name}`}>\n  {props.timeList.map((time, index)=>{\n      if(props.initialValue==time){\n      return(<option value={time} selected>{time}</option>)}\n      else{\n        return(<option value={time}>{time}</option>)\n      }\n  })}</select>);\n};\n\nexport default TimeSelect;","import React from \"react\";\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport { Button } from \"@material-ui/core\";\n\nconst ScheduleTimeRow = (props) =>{\n    return(\n        <ul class=\"box-scheduleTimeRow\">\n        \n        <li class=\"box-scheduleHeader\"></li>\n        {props.timeList.map((value,index)=>{\n            if(index%2==0){\n            return(<li class=\"item-scheduleTimeRow box-even\">{value}</li>)\n        }else{\n            return(<li class=\"item-scheduleTimeRow box-odd\">{value}</li>)\n        }\n        })}\n        </ul>\n    )\n}\nexport default ScheduleTimeRow;","import React,{Component} from \"react\";\nimport RoomChoice from \"../components/RoomChoice\";\nimport TimeSelect from \"../components/TimeSelect\";\n\nclass PostForm extends Component{\n    render(){\n        return(\n        <div>\n            {this.props.date}の予約\n            <TimeSelect name=\"startTime\" initialValue=\"09:30\"/>から\n        <TimeSelect name=\"endTime\" initialValue=\"10:00\"/>まで\n        <RoomChoice />\n        \n        <input type=\"text\" placeholder=\"名前を入力してください\" />\n        <textarea placeholder=\"内容を入力してください\"/>\n        <button>登録</button>\n        <button>戻る</button>  \n        </div>)\n    }\n}\nexport default PostForm;","import React, { Component } from \"react\";\nimport ScheduleRow from \"../components/ScheduleRow\";\nimport { connect } from \"react-redux\";\nimport { fetchAllSchedules } from \"../actions/api_actions\";\nimport { selectBlank, selectSchedule } from \"../actions/form_actions\";\nimport { updateTime, toToday } from \"../actions/general_action\";\nimport PostForm from \"./PostForm\";\nimport ScheduleTimeRow from \"../components/ScheduleTimeRow\";\n\nconst timeList = [\n    \"00:00\",\n    \"00:30\",\n    \"01:00\",\n    \"01:30\",\n    \"02:00\",\n    \"02:30\",\n    \"03:00\",\n    \"03:30\",\n    \"04:00\",\n    \"04:30\",\n    \"05:00\",\n    \"05:30\",\n    \"06:00\",\n    \"06:30\",\n    \"07:00\",\n    \"07:30\",\n    \"08:00\",\n    \"08:30\",\n    \"09:00\",\n    \"09:30\",\n    \"10:00\",\n    \"10:30\",\n    \"11:00\",\n    \"11:30\",\n    \"12:00\",\n    \"12:30\",\n    \"13:00\",\n    \"13:30\",\n    \"14:00\",\n    \"14:30\",\n    \"15:00\",\n    \"15:30\",\n    \"16:00\",\n    \"16:30\",\n    \"17:00\",\n    \"17:30\",\n    \"18:00\",\n    \"18:30\",\n    \"19:00\",\n    \"19:30\",\n    \"20:00\",\n    \"20:30\",\n    \"21:00\",\n    \"21:30\",\n    \"22:00\",\n    \"22:30\",\n    \"23:00\",\n    \"23:30\",\n    \"00:00\",\n];\n\nclass Schedules extends Component {\n  componentWillMount() {\n    setInterval(() => {\n    //   2分ごとに実行\n      this.props.fetchAllSchedules(\n        `${this.props.targetYear}-${this.props.targetMonth}-${\n          this.props.targetDate\n        }`\n      );\n      this.props.updateTime();\n    }, 120000);\n  }\n  componentDidMount(){\n    this.props.fetchAllSchedules(\n        `${this.props.targetYear}-${this.props.targetMonth}-${\n          this.props.targetDate\n        }`\n      );\n  }\n  render() {\n    const roomIdArray = [];\n    for (let i = 1; i <= 8; i++) {\n      roomIdArray.push(i);\n    }\n\n    return (\n      <div class=\"box-schedules\">\n      <ScheduleTimeRow timeList={timeList}/>\n        {roomIdArray.map(roomId => {\n          return (\n            <ScheduleRow\n            timeList={timeList}\n              key={roomId}\n              roomId={roomId}\n              scheduleList={this.props.schedules[roomId]}\n              targetDatetime = {`${this.props.targetYear}-${this.props.targetMonth}-${this.props.targetDate}`}\n              editEvent={this.props.selectSchedule}\n              postEvent={this.props.selectBlank}\n            />\n          );\n        })}\n        \n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  schedules: state.api.schedules,\n  currentHour: state.general.currentHour,\n  currentMinute: state.general.currentMinute,\n  targetYear: state.general.targetYear,\n  targetMonth: state.general.targetMonth,\n  targetDate: state.general.targetDate\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchAllSchedules, selectBlank, selectSchedule, updateTime, toToday }\n)(Schedules);\n","\n\n// Formが変化する\nexport const TOGGLE_FORM_VISIBLE = 'TOGGLE_FORM_VISIBLE';\nexport const SELECT_BLANK = 'SELECT_BLANK';\nexport const SELECT_SCHEDULE = 'SELECT_SCHEDULE';\nexport const CHANGE_FORM_VALUE = 'CHANGE_FORM_VALUE';\nexport const CHANGE_EDIT_VALUE = 'CHANGE_EDIT_VALUE';\nexport const TOGGLE_ROOM_CHECK = 'TOGGLE_ROOM_CHECK';\nexport const TOGGLE_EDIT_FORM = 'TOGGLE_EDIT_FORM';\nexport const TOGGLE_ROOM_CHECK_IN_EDITING = 'TOGGLE_ROOM_CHECK_IN_EDITING'\n\n\n// 通信\n\nexport const REQUEST_DELETE = 'SEND_DELETE';\nexport const SEND_PATCH = 'SEND_PATCH';\nexport const SEND_POST = 'SEND_POST';\nexport const FETCH_ALL_SCHEDULES = 'FETCH_ALL_SCHEDULES';\n\n// 一般\nexport const UPDATE_TIME = 'UPDATE_TIME';\nexport const SELECT_DATE = 'SELECT_DATE';\nexport const ADD_DATE = 'ADD_DATE';\nexport const TO_TODAY = 'TO_TODAY';\n\n\n\n\n\n","import {\n  TOGGLE_FORM_VISIBLE,\n  SELECT_BLANK,\n  SELECT_SCHEDULE,\n  CHANGE_FORM_VALUE,\n  CHANGE_EDIT_VALUE,\n  TOGGLE_ROOM_CHECK,\n  TOGGLE_ROOM_CHECK_IN_EDITING,\n  TOGGLE_EDIT_FORM\n} from \"../actions/types\";\nimport moment from \"moment\";\n\nexport const changeFormValue = (target, value) => dispatch => {\n  dispatch({\n    type: CHANGE_FORM_VALUE,\n    payload: { target: target, value, value }\n  });\n};\nexport const changeEditValue = (target, value) => dispatch => {\n  dispatch({\n    type: CHANGE_EDIT_VALUE,\n    payload: { target: target, value: value }\n  });\n};\nexport const selectBlank = (startTime, roomId) => dispatch => {\n  console.log(startTime);\n  dispatch({\n    type: SELECT_BLANK,\n    payload: {\n      startTime: moment(startTime).format(\"YYYY-MM-DD HH:mm:00\"),\n      roomId: roomId\n    }\n  });\n};\nexport const toggleFormVisible = () => dispatch => {\n  dispatch({\n    type: TOGGLE_FORM_VISIBLE,\n    payload: {}\n  });\n};\n\nexport const toggleRoomCheck = roomId => dispatch => {\n  dispatch({\n    type: TOGGLE_ROOM_CHECK,\n    payload: roomId\n  });\n};\nexport const toggleRoomCheckInEditing = roomId => dispatch => {\n  dispatch({\n    type: TOGGLE_ROOM_CHECK_IN_EDITING,\n    payload: roomId\n  });\n};\n\nconst _constructRoomSelected = (roomIds) =>{\n  const roomSelected = {};\n  for(let i=1;i<=8;i++){\n    if(roomIds.indexOf(i)>=0){\n      roomSelected[i] = true;\n    }else{\n      roomSelected[i]=false;\n    }\n  }\n  return roomSelected;\n}\nexport const selectSchedule = uuid => dispatch => {\n  fetch(\"http://35.211.249.14/\" + uuid, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.json();\n    })\n    .then(responseData => {\n        console.log(responseData);\n      const data = responseData[\"schedule\"];\n      const schedule = {\n        uuid: data.uuid,\n        startTime: moment(String(data.start_time)).format(\"YYYY-MM-DD HH:mm:ss\"),\n        endTime: moment(String(data.end_time)).format(\"YYYY-MM-DD HH:mm:ss\"),\n        userName: data.user_name,\n        content: data.content,\n        created: data.created,\n        edited: data.edited,\n        roomIds:data.room_ids,\n        \n      };\n      return schedule;\n    })\n    .then(schedule => {\n      dispatch({\n        type: SELECT_SCHEDULE,\n        payload: {\n          schedule:schedule,\n          roomSelected:_constructRoomSelected(schedule.roomIds)}\n      });\n    });\n};\n\nexport const toggleEditForm = () => dispatch => {\n  dispatch({\n    type: TOGGLE_EDIT_FORM,\n    payload: {}\n  });\n};\n","import { UPDATE_TIME,SELECT_DATE,ADD_DATE,TO_TODAY } from \"./types\";\nimport moment from 'moment';\nexport const updateTime = () => dispatch => {\n  const datetime = moment();\n    dispatch({\n    type: UPDATE_TIME,\n    payload: {\n        isoWeekday:datetime.isoWeekday(),\n        year:datetime.format(\"YYYY\"),\n        month:datetime.format(\"MM\"),\n        date:datetime.format(\"DD\"),\n        hour:datetime.format(\"HH\"),\n        minute:datetime.format(\"mm\")\n    }\n  });\n};\n\nexport const selectDate = (targetDate) =>dispatch =>{\n    const targetDateMoment = moment(targetDate);\n    dispatch({\n        type:SELECT_DATE,\n        payload:{\n            year:targetDateMoment.format(\"YYYY\"),\n            month:targetDateMoment.format(\"MM\"),\n            date:targetDateMoment.format(\"DD\"),\n            isoWeekday:targetDateMoment.isoWeekday()\n        }\n    })\n}\n\nexport const addDate = (addNum,year,month,date) => dispatch =>{\n    const targetDatetime = moment().set({\n        year: year,\n        month: month - 1,\n        date: date\n      });\n      targetDatetime.add(addNum,\"day\")\n    dispatch({\n        type:ADD_DATE,\n        payload:{\n            year:targetDatetime.format(\"YYYY\"),\n            month:targetDatetime.format(\"MM\"),\n            date:targetDatetime.format(\"DD\"),\n            isoWeekday:targetDatetime.isoWeekday()\n        }\n\n    })\n}\nexport const toToday = ()=>dispatch =>{\n     const today = moment();\n     dispatch({\n         type:TO_TODAY,\n         payload:{\n             year:today.format(\"YYYY\"),\n             month:today.format(\"MM\"),\n             date:today.format(\"DD\"),\n             isoWeekday:today.isoWeekday()\n         },\n     }) \n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./stylesheets/cell.css\";\nimport Schedules from \"./containers/Schedules\";\n\nclass App extends Component {\n  render() {\n    return (\n        <Schedules/>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n    SELECT_DATE,\n    REQUEST_DELETE,\n    SEND_PATCH,\n    SEND_POST,\n    FETCH_ALL_SCHEDULES\n  } from \"../actions/types\";\n\n\nconst initialState = {\n    schedules :{\n        1:{},\n        2:{},\n        3:{},\n        4:{},\n        5:{},\n        6:{},\n        7:{},\n        8:{},\n \n    },\n}\n\nexport default function(state=initialState,action){\n    switch(action.type){\n        case FETCH_ALL_SCHEDULES:\n        return {schedules:action.payload}\n        case REQUEST_DELETE,SEND_PATCH,SEND_POST:\n        return state\n        default:\n        return state\n}\n}","import {\n  TOGGLE_FORM_VISIBLE,\n  SELECT_BLANK,\n  SELECT_SCHEDULE,\n  CHANGE_FORM_VALUE,\n  CHANGE_EDIT_VALUE,\n  TOGGLE_ROOM_CHECK,\n  TOGGLE_EDIT_FORM,\n  TOGGLE_ROOM_CHECK_IN_EDITING\n} from \"../actions/types\";\n\nconst initialState = {\n  roomTouched: 0,\n  scheduleTouched: {\n    uuid: \"\",\n    roomIds: [],\n    startTime: \"\",\n    endTime: \"\",\n    userName: \"\",\n    content: \"\",\n    edited: \"\",\n    created: \"\"\n  },\n  formVisible: false,\n  editing: false,\n  insertSchedule: {\n    roomIds: [],\n    startTime: \"\",\n    endTime: \"\",\n    userName: \"\",\n    content: \"\"\n  },\n  roomSelected: {\n    1: false,\n    2: false,\n    3: false,\n    4: false,\n    5: false,\n    6: false,\n    7: false,\n    8: false\n  }\n};\n\nexport default function(state = initialState, action) {\n  const stateNext = Object.assign({}, state);\n  switch (action.type) {\n    case TOGGLE_EDIT_FORM:\n      stateNext.editing = !stateNext.editing;\n      stateNext.roomSelected = {\n        1: false,\n        2: false,\n        3: false,\n        4: false,\n        5: false,\n        6: false,\n        7: false,\n        8: false\n      };\n      return stateNext;\n    case SELECT_SCHEDULE:\n      stateNext.editing = true;\n      const scheduleTouched = action.payload[\"schedule\"];\n      stateNext.scheduleTouched = scheduleTouched;\n      stateNext.roomSelected = action.payload[\"roomSelected\"];\n      return stateNext;\n    case CHANGE_FORM_VALUE:\n      const target = action.payload.target;\n      const value = action.payload.value;\n      stateNext.insertSchedule[target] = value;\n      return stateNext;\n    case CHANGE_EDIT_VALUE:\n      const k = action.payload.target;\n      const v = action.payload.value;\n      stateNext.scheduleTouched[k] = v;\n\n      return stateNext;\n    case SELECT_BLANK:\n      stateNext.insertSchedule.roomIds = [action.payload.roomId];\n      stateNext.roomSelected[action.payload.roomId] = true;\n      stateNext.insertSchedule.startTime = action.payload.startTime;\n      stateNext.formVisible = true;\n      return stateNext;\n    case TOGGLE_FORM_VISIBLE:\n      return {\n        roomTouched: 0,\n        scheduleTouched: \"\",\n        formVisible: false,\n        editing: false,\n        insertSchedule: {\n          roomIds: [],\n          startTime: \"\",\n          endTime: \"\",\n          userName: \"\",\n          content: \"\"\n        },\n        roomSelected: {\n          1: false,\n          2: false,\n          3: false,\n          4: false,\n          5: false,\n          6: false,\n          7: false,\n          8: false\n        }\n      };\n    case TOGGLE_ROOM_CHECK:\n      const roomIds = action.payload;\n      stateNext.roomSelected[roomIds] = !stateNext.roomSelected[roomIds];\n      const index = stateNext.insertSchedule.roomIds.indexOf(roomIds);\n      if (index >= 0) {\n        // すでに存在する場合削除\n        stateNext.insertSchedule.roomIds.splice(index, 1);\n      } else {\n        //まだない場合追加\n        stateNext.insertSchedule.roomIds.push(action.payload);\n      }\n      return stateNext;\n    case TOGGLE_ROOM_CHECK_IN_EDITING:\n    //タッチされたidを受け取る\n    const roomIdsEditing = action.payload;\n    // 値をトグル\n    stateNext.roomSelected[roomIdsEditing] = !stateNext.roomSelected[roomIdsEditing];\n\n    const indexEditing = stateNext.scheduleTouched.roomIds.indexOf(roomIdsEditing);\n    if (indexEditing >= 0) {\n      // すでに存在する場合削除\n      stateNext.scheduleTouched.roomIds.splice(indexEditing, 1);\n    } else {\n      //まだない場合追加\n      stateNext.scheduleTouched.roomIds.push(roomIdsEditing);\n    }\n    \n    return stateNext;\n    default:\n      return Object.assign({}, state);\n  }\n}\n","import { UPDATE_TIME, SELECT_DATE, ADD_DATE, TO_TODAY } from \"../actions/types\";\nimport moment from 'moment';\nconst initialState = {\n  currentYear: moment().format(\"YYYY\"),\n  currentMonth: moment().format(\"MM\"),\n  currentDate: moment().format(\"DD\"),\n  currentDay: moment().isoWeekday(),\n  currentHour: moment().format(\"HH\"),\n  currentMinute: moment().format(\"mm\"),\n  targetYear: moment().format(\"YYYY\"),\n  targetMonth: moment().format(\"MM\"),\n  targetDay: parseDayToJa(moment().isoWeekday()),\n  targetDate: moment().format(\"DD\")\n};\n\nfunction parseDayToJa(Day) {\n  switch (Day) {\n    case 1:\n      return \"月\";\n    case 2:\n      return \"火\";\n    case 3:\n      return \"水\";\n    case 4:\n      return \"木\";\n    case 5:\n      return \"金\";\n    case 6:\n      return \"土\";\n    case 7:\n      return \"日\";\n  }\n}\n\nexport default function(state = initialState, action) {\n  const nextState = Object.assign({}, state);\n  switch (action.type) {\n    case UPDATE_TIME:\n      nextState.currentDay = parseDayToJa(action.payload.isoWeekday);\n      nextState.currentYear = action.payload.year;\n      nextState.currentMonth = action.payload.month;\n      nextState.currentDate = action.payload.date;\n      nextState.currentHour = action.payload.hour;\n      nextState.currentMinute = action.payload.minute;\n      return nextState;\n    case SELECT_DATE:\n      nextState.targetYear = action.payload.year;\n      nextState.targetMonth = action.payload.month;\n      nextState.targetDate = action.payload.date;\n      nextState.targetDay = parseDayToJa(action.payload.isoWeekday);\n      return nextState;\n    case ADD_DATE:\n      \n      nextState.targetYear = action.payload.year\n      nextState.targetMonth = action.payload.month;\n      nextState.targetDate = action.payload.date;\n      nextState.targetDay = parseDayToJa(action.payload.isoWeekday);\n      return nextState;\n    case TO_TODAY:\n      nextState.targetYear = action.payload.year;\n      nextState.targetMonth = action.payload.month;\n      nextState.targetDate = action.payload.date;\n      nextState.targetDay = parseDayToJa(action.payload.isoWeekday);\n      return nextState;\n    default:\n      return nextState;\n  }\n}\n","import {combineReducers} from 'redux';\nimport apiReducers from './apiReducers';\nimport formReducers from './formReducers';\nimport generalReducers from './generalReducers';\nimport { createGenerateClassName } from '@material-ui/core';\n\nexport default combineReducers({\n    api:apiReducers,\n    form:formReducers,\n    general:generalReducers,\n})","import {createStore,applyMiddleware,compose} from 'redux';\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\n\nconst initialState = {};\nconst middleware = [thunk];\n\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware)\n       //,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // Redux Dev Tool使用のための設定\n    )\n)\n\nexport default store;","import React from \"react\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\n\nconst Root = (props)=>{\n    return(\n        <Provider store={store}>\n        {props.children}\n        </Provider>\n    )\n}\nexport default Root;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Root from \"./Root\";\n\nReactDOM.render(<Root><App /></Root>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}