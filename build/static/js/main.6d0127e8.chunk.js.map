{"version":3,"sources":["reducers/apiReducers.js","reducers/formReducers.js","reducers/generalReducers.js","reducers/index.js","actions/types.js","store.js","components/FillingCell.js","components/BlankCell.js","components/ScheduleCell.js","components/ScheduleHeader.js","components/ClockLine.js","components/ScheduleRow.js","actions/api_actions.js","containers/Schedules.js","actions/form_actions.js","actions/general_action.js","App.js","serviceWorker.js","index.js"],"names":["initialState","schedules","1","2","3","4","5","6","7","8","roomTouched","scheduleTouched","uuid","roomIds","startTime","endTime","userName","content","edited","created","formVisible","editing","insertSchedule","roomSelected","currentYear","moment","format","currentMonth","currentDate","currentDay","isoWeekday","currentHour","currentMinute","targetYear","targetMonth","targetDay","parseDayToJa","targetDate","Day","combineReducers","api","state","arguments","length","undefined","action","type","payload","form","stateNext","Object","assign","target","value","k","v","roomId","index","indexOf","splice","push","roomIdsEditing","indexEditing","general","nextState","year","month","date","hour","minute","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","FillingCell","props","schedule","cellWidth","react_default","a","createElement","class","key","style","height","concat","cellHeight","width","zIndex","BlankCell","ScheduleCell","components_BlankCell","components_FillingCell","ScheduleHeader","ClockLine","top","ScheduleRow","fillingList","i","scheduleList","Number","console","log","components_ScheduleHeader","components_ClockLine","map","components_ScheduleCell","urlBase","_getFromDate","datetime","url","fetch","method","then","response","ok","Error","statusText","responseData","json","_parseSchedules","schedulesArray","schedulesLocal","data","sort","verticalStart","Math","floor","Schedules","_this","this","setInterval","fetchAllSchedules","updateTime","_this2","roomIdArray","components_ScheduleRow","insertAction","Component","connect","dispatch","selectBlank","selectSchedule","headers","Content-Type","String","start_time","end_time","user_name","room_ids","_constructRoomSelected","toToday","today","App","react_redux_es","containers_Schedules","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySASMA,EAAe,CACjBC,UAAW,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,GACFC,EAAE,GACFC,EAAE,GACFC,EAAE,GACFC,EAAE,GACFC,EAAE,KCPJT,EAAe,CACnBU,YAAa,EACbC,gBAAiB,CACfC,KAAM,GACNC,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,SAAU,GACVC,QAAS,GACTC,OAAQ,GACRC,QAAS,IAEXC,aAAa,EACbC,SAAS,EACTC,eAAgB,CACdT,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,SAAU,GACVC,QAAS,IAEXM,aAAc,CACZrB,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,oBCtCDT,EAAe,CACnBwB,YAAaC,MAASC,OAAO,QAC7BC,aAAcF,MAASC,OAAO,MAC9BE,YAAaH,MAASC,OAAO,MAC7BG,WAAYJ,MAASK,aACrBC,YAAaN,MAASC,OAAO,MAC7BM,cAAeP,MAASC,OAAO,MAC/BO,WAAYR,MAASC,OAAO,QAC5BQ,YAAaT,MAASC,OAAO,MAC7BS,UAAWC,EAAaX,MAASK,cACjCO,WAAYZ,MAASC,OAAO,OAG9B,SAASU,EAAaE,GACpB,OAAQA,GACN,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,UAIE,IC5BAC,cAAgB,CAC3BC,IHgBW,WAAmC,IAA1BC,EAA0BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB1C,EAAa6C,EAAOH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9C,OAAOC,EAAOC,MACV,IIP2B,sBJQ3B,MAAO,CAAC7C,UAAU4C,EAAOE,SACzB,IIViB,YJYjB,QACA,OAAON,IGtBXO,KFoCW,WAAuC,IAA9BP,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB1C,EAAc6C,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9CK,EAAYC,OAAOC,OAAO,GAAIV,GACpC,OAAQI,EAAOC,MACb,IGtC4B,mBHkD1B,OAXAG,EAAU5B,SAAW4B,EAAU5B,QAC/B4B,EAAU1B,aAAe,CACvBrB,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,GAEEwC,EACT,IGvD2B,kBHwDzBA,EAAU5B,SAAU,EACpB,IAAMV,EAAkBkC,EAAOE,QAAP,SAGxB,OAFAE,EAAUtC,gBAAkBA,EAC5BsC,EAAU1B,aAAesB,EAAOE,QAAP,aAClBE,EACT,IG5D6B,oBH6D3B,IAAMG,EAASP,EAAOE,QAAQK,OACxBC,EAAQR,EAAOE,QAAQM,MAE7B,OADAJ,EAAU3B,eAAe8B,GAAUC,EAC5BJ,EACT,IGhE6B,oBHiE3B,IAAMK,EAAIT,EAAOE,QAAQK,OACnBG,EAAIV,EAAOE,QAAQM,MAGzB,OAFAJ,EAAUtC,gBAAgB2C,GAAKC,EAExBN,EACT,IGzEwB,eH8EtB,OAJAA,EAAU3B,eAAeT,QAAU,CAACgC,EAAOE,QAAQS,QACnDP,EAAU1B,aAAasB,EAAOE,QAAQS,SAAU,EAChDP,EAAU3B,eAAeR,UAAY+B,EAAOE,QAAQjC,UACpDmC,EAAU7B,aAAc,EACjB6B,EACT,IGhF+B,sBHiF7B,MAAO,CACLvC,YAAa,EACbC,gBAAiB,GACjBS,aAAa,EACbC,SAAS,EACTC,eAAgB,CACdT,QAAS,GACTC,UAAW,GACXC,QAAS,GACTC,SAAU,GACVC,QAAS,IAEXM,aAAc,CACZrB,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,EACHC,GAAG,IAGT,IGnG6B,oBHoG3B,IAAMI,EAAUgC,EAAOE,QACvBE,EAAU1B,aAAaV,IAAYoC,EAAU1B,aAAaV,GAC1D,IAAM4C,EAAQR,EAAU3B,eAAeT,QAAQ6C,QAAQ7C,GAQvD,OAPI4C,GAAS,EAEXR,EAAU3B,eAAeT,QAAQ8C,OAAOF,EAAO,GAG/CR,EAAU3B,eAAeT,QAAQ+C,KAAKf,EAAOE,SAExCE,EACT,IG7GwC,+BH+GxC,IAAMY,EAAiBhB,EAAOE,QAE9BE,EAAU1B,aAAasC,IAAmBZ,EAAU1B,aAAasC,GAEjE,IAAMC,EAAeb,EAAUtC,gBAAgBE,QAAQ6C,QAAQG,GAS/D,OARIC,GAAgB,EAElBb,EAAUtC,gBAAgBE,QAAQ8C,OAAOG,EAAc,GAGvDb,EAAUtC,gBAAgBE,QAAQ+C,KAAKC,GAGlCZ,EACP,QACE,OAAOC,OAAOC,OAAO,GAAIV,KE/H3BsB,QDyBW,WAAuC,IAA9BtB,EAA8BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtB1C,EAAc6C,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC9CoB,EAAYd,OAAOC,OAAO,GAAIV,GACpC,OAAQI,EAAOC,MACb,IEhBuB,cFuBrB,OANAkB,EAAUnC,WAAaO,EAAaS,EAAOE,QAAQjB,YACnDkC,EAAUxC,YAAcqB,EAAOE,QAAQkB,KACvCD,EAAUrC,aAAekB,EAAOE,QAAQmB,MACxCF,EAAUpC,YAAciB,EAAOE,QAAQoB,KACvCH,EAAUjC,YAAcc,EAAOE,QAAQqB,KACvCJ,EAAUhC,cAAgBa,EAAOE,QAAQsB,OAClCL,EACT,IEvBuB,cF6BvB,IE5BoB,WFmCpB,IElCoB,WFuClB,OAJAA,EAAU/B,WAAaY,EAAOE,QAAQkB,KACtCD,EAAU9B,YAAcW,EAAOE,QAAQmB,MACvCF,EAAU3B,WAAaQ,EAAOE,QAAQoB,KACtCH,EAAU7B,UAAYC,EAAaS,EAAOE,QAAQjB,YAC3CkC,EACT,QACE,OAAOA,MG3DPM,EAAa,OAACC,GAYLC,EATDC,YACVC,EALiB,GAOjBC,YACIC,IAAeC,WAAf,EAAmBP,YCSZQ,EApBI,SAACC,GAClB,OAA6B,GAA1BA,EAAMC,SAASC,UAEdC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aAAaC,IAAKP,EAAMO,IAAKC,MAAO,CAACC,OAAM,GAAAC,OAA8B,EAA1BV,EAAMC,SAASU,WAAyC,GAA1BX,EAAMC,SAASU,WAAjD,UAGtB,GAA3BX,EAAMC,SAASU,WACfR,EAAAC,EAAAC,cAAA,YAGPF,EAAAC,EAAAC,cAAA,OAAKC,MAAM,iBAAiBC,IAAKP,EAAMO,IAAIC,MAAO,CAACI,MAAK,GAAAF,OAA6B,IAAzBV,EAAMC,SAASC,UAAnB,OAClDC,EAAAC,EAAAC,cAAA,OAAKC,MAAM,mBAAoBE,MAAO,CAACC,OAAM,GAAAC,OAA8B,EAA1BV,EAAMC,SAASU,WAA6C,IAA7BX,EAAMC,SAASU,WAAW,GAA7D,OAA0EE,OAAO,IAC7Hb,EAAMC,SAAShE,SADhB,SAEE+D,EAAMC,SAAS/D,QAFjB,YCAK4E,EAXC,SAACd,GACT,OACIG,EAAAC,EAAAC,cAAA,OACFE,IAAKP,EAAMO,IACXD,MAAM,kBCODS,EARK,SAACf,GACjB,OAAmB,GAAhBA,EAAMC,SACEE,EAAAC,EAAAC,cAACW,EAAD,CAAWT,IAAKP,EAAMO,MAEtBJ,EAAAC,EAAAC,cAACY,EAAD,CAAaV,IAAKP,EAAMO,IAAKN,SAAUD,EAAMC,YCA7CiB,EAPO,SAAClB,GACnB,OACIG,EAAAC,EAAAC,cAAA,OAAKC,MAAM,sBACXH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,uBAAX,qBAAqCN,EAAMvB,UCEpC0C,EALG,SAACnB,GACf,OACIG,EAAAC,EAAAC,cAAA,OAAKC,MAAM,gBAAgBE,MAAO,CAACY,IAAG,GAAAV,OAAIV,EAAMoB,IAAV,WCiC/BC,EA/BK,SAACrB,GAEjB,IADA,IAAMsB,EAAc,GACZC,EAAE,EAAEA,GAAG,GAAGA,IACdD,EAAYzC,MAAK,GAErB,IAAM2C,EAAexB,EAAMwB,aAC3B,IAAI,IAAIjB,KAAOiB,EAEX,GADAF,EAAYf,GAAOiB,EAAajB,GAC7BiB,EAAajB,GAAKI,WAAW,EAExB,IAAI,IAAIY,EAAE,EAAEA,EAAEC,EAAajB,GAAKI,WAAWY,IACvCD,EAAYG,OAAOlB,GAAKgB,GAAK,CACzBZ,WAAW,GAO/B,OADAe,QAAQC,IAAIL,GAERnB,EAAAC,EAAAC,cAAA,MAAIC,MAAM,mBACNH,EAAAC,EAAAC,cAACuB,EAAD,CAAgBnD,OAAQuB,EAAMvB,SAC9B0B,EAAAC,EAAAC,cAACwB,EAAD,CAAWT,IAAK,KACfE,EAAYQ,IAAI,SAAC7B,EAASvB,GACvB,OAAQyB,EAAAC,EAAAC,cAAC0B,EAAD,CAAc9B,SAAUA,EAAUM,IAAK7B,QCnBzDsD,QAAU,yBAuHVC,EAAe,SAAAC,GAEnB,IAAM5E,EAAaZ,IAAOwF,GACpBC,EACJH,EAAO,YAAAtB,OACKpD,EAAWX,OAAO,QADvB,KAAA+D,OACkCpD,EAAWX,OAClD,MAFK,KAAA+D,OAGFpD,EAAWX,OAAO,OAEzB,OADE+E,QAAQC,IAAIQ,GACPC,MAAMD,EAAK,CAAEE,OAAQ,QACzBC,KAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAMC,MAAMF,EAASG,YAEvB,OAAOH,IAERD,KAAK,SAAAK,GACJ,OAAOA,EAAaC,UAIpBC,EAAkB,SAAAC,GACtB,IAAMC,EAAiB,CACrB5H,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IAEL,IAAK,IAAIgD,KAASoE,EAAgB,CAEhC,IAAIE,EAAOF,EAAepE,GACtB7C,EAAOmH,EAAI,KACX/G,EAAW+G,EAAI,UACf9G,EAAU8G,EAAI,QACdjH,EAAYW,IAAOsG,EAAI,YACvBhH,EAAUU,IAAOsG,EAAI,UACrBlH,EAAUkH,EAAI,SAAaC,OAC3B/C,EAAY8C,EAAI,WAChBrC,EAAaqC,EAAI,YAEjBE,EAC+B,EAAjCzB,OAAO1F,EAAUY,OAAO,OACxBwG,KAAKC,MAAM3B,OAAO1F,EAAUY,OAAO,OAAS,IAC9C,IAAK,IAAI+B,KAAS5C,EAAS,CACzB,IAAI2C,EAAS3C,EAAQ4C,GACrBqE,EAAetE,GAAQyE,GAAiB,CACtCrH,KAAMA,EACN4C,OAAQA,EACR1C,UAAWA,EACXC,QAASA,EACTC,SAAUA,EACVC,QAASA,EACTyE,WAAYA,GAGdoC,EAAetE,GAAQyE,GAAehD,UAAYA,EAClDA,EAAY,GAGhB,OAAO6C,GC1LHM,+LACiB,IAAAC,EAAAC,KACnBC,YAAY,WAEVF,EAAKtD,MAAMyD,kBAAX,GAAA/C,OACK4C,EAAKtD,MAAM9C,WADhB,KAAAwD,OAC8B4C,EAAKtD,MAAM7C,YADzC,KAAAuD,OAEI4C,EAAKtD,MAAM1C,aAGfgG,EAAKtD,MAAM0D,cACV,kDAGHH,KAAKvD,MAAMyD,kBAAX,GAAA/C,OACO6C,KAAKvD,MAAM9C,WADlB,KAAAwD,OACgC6C,KAAKvD,MAAM7C,YAD3C,KAAAuD,OAEM6C,KAAKvD,MAAM1C,8CAMjB,IAFO,IAAAqG,EAAAJ,KACDK,EAAc,GACXrC,EAAI,EAAGA,GAAK,EAAGA,IACtBqC,EAAY/E,KAAK0C,GAGnB,OACEpB,EAAAC,EAAAC,cAAA,OAAKC,MAAM,iBACRsD,EAAY9B,IAAI,SAAArD,GAEf,OADEiD,QAAQC,IAAIgC,EAAK3D,MAAM9E,UAAUuD,IAEjC0B,EAAAC,EAAAC,cAACwD,EAAD,CACEtD,IAAK9B,EACLA,OAAQA,EACR+C,aAAcmC,EAAK3D,MAAM9E,UAAUuD,GACnCqF,aAAc,WACZpC,QAAQC,IAAI,uBAnCJoC,aAsDTC,cATS,SAAAtG,GAAK,MAAK,CAChCxC,UAAWwC,EAAMD,IAAIvC,UACrB8B,YAAaU,EAAMsB,QAAQhC,YAC3BC,cAAeS,EAAMsB,QAAQ/B,cAC7BC,WAAYQ,EAAMsB,QAAQ9B,WAC1BC,YAAaO,EAAMsB,QAAQ7B,YAC3BG,WAAYI,EAAMsB,QAAQ1B,aAK1B,CAAEmG,kBD/C6B,SAAAvB,GAAQ,OAAI,SAAA+B,GAE3ChC,EAAaC,GAAUI,KAAK,SAAAK,GAC1B,IAAMI,EAAiBF,EAAgBF,EAAY,WACnDsB,EAAS,CACPlG,KRH6B,sBQI7BC,QAAS+E,QCyCQmB,YCvCI,SAACnI,EAAW0C,GAAZ,OAAuB,SAAAwF,GAChDA,EAAS,CACPlG,KVtBwB,eUuBxBC,QAAS,CACPjC,UAAWW,IAAOX,GAAWY,OAAO,uBACpC8B,OAAQA,ODkCsB0F,eCCN,SAAAtI,GAAI,OAAI,SAAAoI,GACpC7B,MAAM,wBAA0BvG,EAAM,CACpCwG,OAAQ,MACR+B,QAAS,CACPC,eAAgB,sBAGjB/B,KAAK,SAAAC,GACJ,IAAKA,EAASC,GACZ,MAAMC,MAAMF,EAASG,YAEvB,OAAOH,EAASK,SAEjBN,KAAK,SAAAK,GACFjB,QAAQC,IAAIgB,GACd,IAAMK,EAAOL,EAAY,SAYzB,MAXiB,CACf9G,KAAMmH,EAAKnH,KACXE,UAAWW,IAAO4H,OAAOtB,EAAKuB,aAAa5H,OAAO,uBAClDX,QAASU,IAAO4H,OAAOtB,EAAKwB,WAAW7H,OAAO,uBAC9CV,SAAU+G,EAAKyB,UACfvI,QAAS8G,EAAK9G,QACdE,QAAS4G,EAAK5G,QACdD,OAAQ6G,EAAK7G,OACbL,QAAQkH,EAAK0B,YAKhBpC,KAAK,SAAArC,GACJgE,EAAS,CACPlG,KV1FuB,kBU2FvBC,QAAS,CACPiC,SAASA,EACTzD,aA7CqB,SAACV,GAE9B,IADA,IAAMU,EAAe,GACb+E,EAAE,EAAEA,GAAG,EAAEA,IACZzF,EAAQ6C,QAAQ4C,IAAI,EACrB/E,EAAa+E,IAAK,EAElB/E,EAAa+E,IAAG,EAGpB,OAAO/E,EAoCcmI,CAAuB1E,EAASnE,gBDnCH4H,WE7D1B,kBAAM,SAAAO,GAC9B,IAAM/B,EAAWxF,MACfuH,EAAS,CACTlG,KXgBuB,cWfvBC,QAAS,CACLjB,WAAWmF,EAASnF,aACpBmC,KAAKgD,EAASvF,OAAO,QACrBwC,MAAM+C,EAASvF,OAAO,MACtByC,KAAK8C,EAASvF,OAAO,MACrB0C,KAAK6C,EAASvF,OAAO,MACrB2C,OAAO4C,EAASvF,OAAO,WFmDiCiI,QEfzC,kBAAI,SAAAX,GACtB,IAAMY,EAAQnI,MACduH,EAAS,CACLlG,KX3Be,WW4BfC,QAAQ,CACJkB,KAAK2F,EAAMlI,OAAO,QAClBwC,MAAM0F,EAAMlI,OAAO,MACnByC,KAAKyF,EAAMlI,OAAO,MAClBI,WAAW8H,EAAM9H,mBFKfiH,CAGbX,GG/CayB,mLARX,OACE3E,EAAAC,EAAAC,cAAC0E,EAAA,EAAD,CAAUtF,MAAOA,GACfU,EAAAC,EAAAC,cAAC2E,EAAD,cAJUjB,aCGEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOpF,EAAAC,EAAAC,cAACmF,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,KAAK,SAAAwD,GACjCA,EAAaC","file":"static/js/main.6d0127e8.chunk.js","sourcesContent":["import {\n    SELECT_DATE,\n    REQUEST_DELETE,\n    SEND_PATCH,\n    SEND_POST,\n    FETCH_ALL_SCHEDULES\n  } from \"../actions/types\";\n\n\nconst initialState = {\n    schedules :{\n        1:{},\n        2:{},\n        3:{},\n        4:{},\n        5:{},\n        6:{},\n        7:{},\n        8:{},\n \n    },\n}\n\nexport default function(state=initialState,action){\n    switch(action.type){\n        case FETCH_ALL_SCHEDULES:\n        return {schedules:action.payload}\n        case REQUEST_DELETE,SEND_PATCH,SEND_POST:\n        return state\n        default:\n        return state\n}\n}","import {\n  TOGGLE_FORM_VISIBLE,\n  SELECT_BLANK,\n  SELECT_SCHEDULE,\n  CHANGE_FORM_VALUE,\n  CHANGE_EDIT_VALUE,\n  TOGGLE_ROOM_CHECK,\n  TOGGLE_EDIT_FORM,\n  TOGGLE_ROOM_CHECK_IN_EDITING\n} from \"../actions/types\";\n\nconst initialState = {\n  roomTouched: 0,\n  scheduleTouched: {\n    uuid: \"\",\n    roomIds: [],\n    startTime: \"\",\n    endTime: \"\",\n    userName: \"\",\n    content: \"\",\n    edited: \"\",\n    created: \"\"\n  },\n  formVisible: false,\n  editing: false,\n  insertSchedule: {\n    roomIds: [],\n    startTime: \"\",\n    endTime: \"\",\n    userName: \"\",\n    content: \"\"\n  },\n  roomSelected: {\n    1: false,\n    2: false,\n    3: false,\n    4: false,\n    5: false,\n    6: false,\n    7: false,\n    8: false\n  }\n};\n\nexport default function(state = initialState, action) {\n  const stateNext = Object.assign({}, state);\n  switch (action.type) {\n    case TOGGLE_EDIT_FORM:\n      stateNext.editing = !stateNext.editing;\n      stateNext.roomSelected = {\n        1: false,\n        2: false,\n        3: false,\n        4: false,\n        5: false,\n        6: false,\n        7: false,\n        8: false\n      };\n      return stateNext;\n    case SELECT_SCHEDULE:\n      stateNext.editing = true;\n      const scheduleTouched = action.payload[\"schedule\"];\n      stateNext.scheduleTouched = scheduleTouched;\n      stateNext.roomSelected = action.payload[\"roomSelected\"];\n      return stateNext;\n    case CHANGE_FORM_VALUE:\n      const target = action.payload.target;\n      const value = action.payload.value;\n      stateNext.insertSchedule[target] = value;\n      return stateNext;\n    case CHANGE_EDIT_VALUE:\n      const k = action.payload.target;\n      const v = action.payload.value;\n      stateNext.scheduleTouched[k] = v;\n\n      return stateNext;\n    case SELECT_BLANK:\n      stateNext.insertSchedule.roomIds = [action.payload.roomId];\n      stateNext.roomSelected[action.payload.roomId] = true;\n      stateNext.insertSchedule.startTime = action.payload.startTime;\n      stateNext.formVisible = true;\n      return stateNext;\n    case TOGGLE_FORM_VISIBLE:\n      return {\n        roomTouched: 0,\n        scheduleTouched: \"\",\n        formVisible: false,\n        editing: false,\n        insertSchedule: {\n          roomIds: [],\n          startTime: \"\",\n          endTime: \"\",\n          userName: \"\",\n          content: \"\"\n        },\n        roomSelected: {\n          1: false,\n          2: false,\n          3: false,\n          4: false,\n          5: false,\n          6: false,\n          7: false,\n          8: false\n        }\n      };\n    case TOGGLE_ROOM_CHECK:\n      const roomIds = action.payload;\n      stateNext.roomSelected[roomIds] = !stateNext.roomSelected[roomIds];\n      const index = stateNext.insertSchedule.roomIds.indexOf(roomIds);\n      if (index >= 0) {\n        // すでに存在する場合削除\n        stateNext.insertSchedule.roomIds.splice(index, 1);\n      } else {\n        //まだない場合追加\n        stateNext.insertSchedule.roomIds.push(action.payload);\n      }\n      return stateNext;\n    case TOGGLE_ROOM_CHECK_IN_EDITING:\n    //タッチされたidを受け取る\n    const roomIdsEditing = action.payload;\n    // 値をトグル\n    stateNext.roomSelected[roomIdsEditing] = !stateNext.roomSelected[roomIdsEditing];\n\n    const indexEditing = stateNext.scheduleTouched.roomIds.indexOf(roomIdsEditing);\n    if (indexEditing >= 0) {\n      // すでに存在する場合削除\n      stateNext.scheduleTouched.roomIds.splice(indexEditing, 1);\n    } else {\n      //まだない場合追加\n      stateNext.scheduleTouched.roomIds.push(roomIdsEditing);\n    }\n    \n    return stateNext;\n    default:\n      return Object.assign({}, state);\n  }\n}\n","import { UPDATE_TIME, SELECT_DATE, ADD_DATE, TO_TODAY } from \"../actions/types\";\nimport moment from 'moment';\nconst initialState = {\n  currentYear: moment().format(\"YYYY\"),\n  currentMonth: moment().format(\"MM\"),\n  currentDate: moment().format(\"DD\"),\n  currentDay: moment().isoWeekday(),\n  currentHour: moment().format(\"HH\"),\n  currentMinute: moment().format(\"mm\"),\n  targetYear: moment().format(\"YYYY\"),\n  targetMonth: moment().format(\"MM\"),\n  targetDay: parseDayToJa(moment().isoWeekday()),\n  targetDate: moment().format(\"DD\")\n};\n\nfunction parseDayToJa(Day) {\n  switch (Day) {\n    case 1:\n      return \"月\";\n    case 2:\n      return \"火\";\n    case 3:\n      return \"水\";\n    case 4:\n      return \"木\";\n    case 5:\n      return \"金\";\n    case 6:\n      return \"土\";\n    case 7:\n      return \"日\";\n  }\n}\n\nexport default function(state = initialState, action) {\n  const nextState = Object.assign({}, state);\n  switch (action.type) {\n    case UPDATE_TIME:\n      nextState.currentDay = parseDayToJa(action.payload.isoWeekday);\n      nextState.currentYear = action.payload.year;\n      nextState.currentMonth = action.payload.month;\n      nextState.currentDate = action.payload.date;\n      nextState.currentHour = action.payload.hour;\n      nextState.currentMinute = action.payload.minute;\n      return nextState;\n    case SELECT_DATE:\n      nextState.targetYear = action.payload.year;\n      nextState.targetMonth = action.payload.month;\n      nextState.targetDate = action.payload.date;\n      nextState.targetDay = parseDayToJa(action.payload.isoWeekday);\n      return nextState;\n    case ADD_DATE:\n      \n      nextState.targetYear = action.payload.year\n      nextState.targetMonth = action.payload.month;\n      nextState.targetDate = action.payload.date;\n      nextState.targetDay = parseDayToJa(action.payload.isoWeekday);\n      return nextState;\n    case TO_TODAY:\n      nextState.targetYear = action.payload.year;\n      nextState.targetMonth = action.payload.month;\n      nextState.targetDate = action.payload.date;\n      nextState.targetDay = parseDayToJa(action.payload.isoWeekday);\n      return nextState;\n    default:\n      return nextState;\n  }\n}\n","import {combineReducers} from 'redux';\nimport apiReducers from './apiReducers';\nimport formReducers from './formReducers';\nimport generalReducers from './generalReducers';\nimport { createGenerateClassName } from '@material-ui/core';\n\nexport default combineReducers({\n    api:apiReducers,\n    form:formReducers,\n    general:generalReducers,\n})","\n\n// Formが変化する\nexport const TOGGLE_FORM_VISIBLE = 'TOGGLE_FORM_VISIBLE';\nexport const SELECT_BLANK = 'SELECT_BLANK';\nexport const SELECT_SCHEDULE = 'SELECT_SCHEDULE';\nexport const CHANGE_FORM_VALUE = 'CHANGE_FORM_VALUE';\nexport const CHANGE_EDIT_VALUE = 'CHANGE_EDIT_VALUE';\nexport const TOGGLE_ROOM_CHECK = 'TOGGLE_ROOM_CHECK';\nexport const TOGGLE_EDIT_FORM = 'TOGGLE_EDIT_FORM';\nexport const TOGGLE_ROOM_CHECK_IN_EDITING = 'TOGGLE_ROOM_CHECK_IN_EDITING'\n\n\n// 通信\n\nexport const REQUEST_DELETE = 'SEND_DELETE';\nexport const SEND_PATCH = 'SEND_PATCH';\nexport const SEND_POST = 'SEND_POST';\nexport const FETCH_ALL_SCHEDULES = 'FETCH_ALL_SCHEDULES';\n\n// 一般\nexport const UPDATE_TIME = 'UPDATE_TIME';\nexport const SELECT_DATE = 'SELECT_DATE';\nexport const ADD_DATE = 'ADD_DATE';\nexport const TO_TODAY = 'TO_TODAY';\n\n\n\n\n\n","import {createStore,applyMiddleware,compose} from 'redux';\nimport rootReducer from \"./reducers\";\nimport thunk from \"redux-thunk\";\n\n\nconst initialState = {};\nconst middleware = [thunk];\n\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(...middleware)\n       //,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() // Redux Dev Tool使用のための設定\n    )\n)\n\nexport default store;","import React, { Component } from \"react\";\n\nconst FillingCell =(props)=> {\n  if(props.schedule.cellWidth==0){\n    return(\n      <div class=\"cell-under\" key={props.key} style={{height:`${props.schedule.cellHeight*5 + props.schedule.cellHeight*0.1}rem`}}>\n          </div>\n    )\n  }else if(props.schedule.cellHeight==0){\n    return(<div></div>)\n  }else{\n    return (\n    <div class=\"li-fillingCell\" key={props.key}style={{width:`${props.schedule.cellWidth*100}%`}}>\n          <div class=\"item-fillingCell\"  style={{height:`${props.schedule.cellHeight*5 + (props.schedule.cellHeight-1)*0.1}rem` ,zIndex:1}}>\n          {props.schedule.userName}\n          「{props.schedule.content}」\n          </div>\n          </div>\n    );\n  }\n}\n\nexport default FillingCell;","import React, { Component } from \"react\";\n\nconst BlankCell=(props)=>{\n        return (\n            <div\n          key={props.key}\n          class=\"li-blankCell\"\n        >\n       \n        </div>\n        )\n    \n}\nexport default BlankCell;","import React,{Component} from 'react';\nimport FillingCell from './FillingCell';\nimport BlankCell from './BlankCell';\n\n\nconst ScheduleCell =(props)=>{\n    if(props.schedule==false){\n        return(<BlankCell key={props.key}/>)\n    }else{\n        return(<FillingCell key={props.key} schedule={props.schedule}/>)\n    }\n}\n\nexport default ScheduleCell;","import React ,{Component} from \"react\";\n\nconst ScheduleHeader =(props) =>{\n    return (\n        <div class=\"box-scheduleHeader\">\n        <div class=\"item-scheduleHeader\">会議室{props.roomId}</div>\n        </div>\n    )\n}\nexport default ScheduleHeader;","import React,{Component} from \"react\";\n\nconst ClockLine = (props)=>{\n    return(\n        <div class=\"box-clockLine\" style={{top:`${props.top}rem`}}></div>\n    )\n}\nexport default ClockLine;","import React ,{Component} from \"react\";\nimport ScheduleCell from './ScheduleCell';\nimport ScheduleHeader from \"./ScheduleHeader\";\nimport ClockLine from './ClockLine';\n\n\nconst ScheduleRow = (props)=>{\n    const fillingList = []\n    for(let i=1;i<=49;i++){\n        fillingList.push(false);\n    }\n    const scheduleList = props.scheduleList;\n    for(let key in scheduleList){\n        fillingList[key] = scheduleList[key];\n        if(scheduleList[key].cellHeight>1){\n            \n                for(let i=1;i<scheduleList[key].cellHeight;i++){\n                    fillingList[Number(key)+i] = {\n                        cellHeight:0,\n                    } \n            }\n        \n        }\n    }\n    console.log(fillingList);\n    return(\n        <ul class=\"box-scheduleRow\">\n            <ScheduleHeader roomId={props.roomId}/>\n            <ClockLine top={20}/>\n            {fillingList.map((schedule,index)=>{\n                return (<ScheduleCell schedule={schedule} key={index}/>)\n            })}\n        </ul>\n    )\n\n    \n}\nexport default ScheduleRow;","import {\n  SELECT_DATE,\n  REQUEST_DELETE,\n  SEND_PATCH,\n  SEND_POST,\n  FETCH_ALL_SCHEDULES\n} from \"./types\";\nimport moment from 'moment';\n\n//import moment from \"moment\";\n\nconst urlBase = \"http://35.211.249.14/\";\nconst headers = {\n  \"Content-Type\": \"application/json\"\n};\n\nexport const fetchAllSchedules = datetime => dispatch => {\n  // データ取得\n  _getFromDate(datetime).then(responseData => {\n    const schedulesLocal = _parseSchedules(responseData[\"schedules\"]);\n    dispatch({\n      type: FETCH_ALL_SCHEDULES,\n      payload: schedulesLocal\n    });\n  });\n};\nexport const sendPatch = patchData => dispatch => {\n  const body = JSON.stringify({\n    schedules: {\n      uuid: patchData.uuid,\n      content: patchData.content,\n      user_name: patchData.userName,\n      room_ids: patchData.roomIds,\n      start_time: patchData.startTime,\n      end_time: patchData.endTime\n    }\n  });\n  const url = urlBase + \"reserves\";\n\n  fetch(url, { method: \"PUT\", headers: headers, body: body })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(\n      dispatch({\n        type: SEND_PATCH,\n        payload: {}\n      })\n    );\n};\nexport const requestDelete = uuid => dispatch => {\n  const url = urlBase + \"reserves\";\n  const body = JSON.stringify({ uuid: uuid });\n  fetch(url, { method: \"DELETE\", headers: headers, body: body })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(\n      dispatch({\n        type: REQUEST_DELETE,\n        payload: {}\n      })\n    );\n  return;\n};\nconst _constructInsertSchedules = postData => {\n  const roomIds = postData.roomIds;\n  const insertSchedules = [];\n  const schedule = {\n    room_ids: postData.roomIds,\n    user_name: postData.userName,\n    content: postData.content,\n    start_time: postData.startTime,\n    end_time: postData.endTime,\n    room_ids: []\n  };\n  for (let index in roomIds) {\n    if (index == 0) {\n      // 一番目は比べようがないのでそのまま追加\n      schedule.room_ids.push(roomIds[index]);\n    } else {\n      // 連続値ならそのまま追加\n      if (roomIds[index - 1] + 1 == roomIds[index]) {\n        schedule.room_ids.push(roomIds[index]);\n      } else {\n        // そうでない場合これまでの予定を配列に格納し\n        // room_idsキーの値を初期化\n        insertSchedules.push(Object.assign({}, schedule));\n        schedule.room_ids = [roomIds[index]];\n      }\n    }\n  }\n  // 最後のscheduleオブジェクトはループの追加から外れているので追加\n  insertSchedules.push(schedule);\n  return insertSchedules;\n};\nexport const sendPost = postData => dispatch => {\n  const insertSchedules = _constructInsertSchedules(postData);\n  console.log(insertSchedules);\n  const body = JSON.stringify({ insert_schedules: insertSchedules });\n  const url = urlBase + \"reserves\";\n  \n  fetch(url, { method: \"POST\", headers: headers, body: body })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(response => {\n      // うまくPOSTできたらもう一度読み込みを行う\n      _getFromDate(postData.startTime).then(responseData => {\n        const schedulesLocal = _parseSchedules(responseData[\"schedules\"]);\n        dispatch({\n          type: SEND_POST,\n          payload: schedulesLocal\n        });\n      });\n    })\n    .catch(error => {\n      alert(error);\n    });\n};\n\nconst _getFromDate = datetime => {\n  // APIにアクセスして特定の日時のデータを取得\n  const targetDate = moment(datetime);\n  const url =\n    urlBase +\n    `reserves/${targetDate.format(\"YYYY\")}/${targetDate.format(\n      \"MM\"\n    )}/${targetDate.format(\"DD\")}`;\n    console.log(url);\n  return fetch(url, { method: \"GET\" })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response;\n    })\n    .then(responseData => {\n      return responseData.json();\n    });\n};\n\nconst _parseSchedules = schedulesArray => {\n  const schedulesLocal = {\n    1: {},\n    2: {},\n    3: {},\n    4: {},\n    5: {},\n    6: {},\n    7: {},\n    8: {}\n  };\n  for (let index in schedulesArray) {\n    // 開始時間と終了時間からセルのサイズを算出する\n    let data = schedulesArray[index];\n    let uuid = data[\"uuid\"];\n    let userName = data[\"user_name\"];\n    let content = data[\"content\"];\n    let startTime = moment(data[\"start_time\"]);\n    let endTime = moment(data[\"end_time\"]);\n    let roomIds = data[\"room_ids\"].sort();\n    let cellWidth = data[\"cell_width\"];\n    let cellHeight = data[\"cell_height\"];\n\n    let verticalStart =\n      Number(startTime.format(\"HH\")) * 2 +\n      Math.floor(Number(startTime.format(\"mm\")) / 30);\n    for (let index in roomIds) {\n      let roomId = roomIds[index];\n      schedulesLocal[roomId][verticalStart] = {\n        uuid: uuid,\n        roomId: roomId,\n        startTime: startTime,\n        endTime: endTime,\n        userName: userName,\n        content: content,\n        cellHeight: cellHeight\n      };\n      // 一度目のiteration以外0になる\n      schedulesLocal[roomId][verticalStart].cellWidth = cellWidth;\n      cellWidth = 0;\n    }\n  }\n  return schedulesLocal;\n};\n","import React, { Component } from \"react\";\nimport ScheduleRow from \"../components/ScheduleRow\";\nimport { connect } from \"react-redux\";\nimport { fetchAllSchedules } from \"../actions/api_actions\";\nimport { selectBlank, selectSchedule } from \"../actions/form_actions\";\nimport { updateTime, toToday } from \"../actions/general_action\";\n\nclass Schedules extends Component {\n  componentWillMount() {\n    setInterval(() => {\n    //   2分ごとに実行\n      this.props.fetchAllSchedules(\n        `${this.props.targetYear}-${this.props.targetMonth}-${\n          this.props.targetDate\n        }`\n      );\n      this.props.updateTime();\n    }, 120000);\n  }\n  componentDidMount(){\n    this.props.fetchAllSchedules(\n        `${this.props.targetYear}-${this.props.targetMonth}-${\n          this.props.targetDate\n        }`\n      );\n  }\n  render() {\n    const roomIdArray = [];\n    for (let i = 1; i <= 8; i++) {\n      roomIdArray.push(i);\n    }\n\n    return (\n      <div class=\"box-schedules\">\n        {roomIdArray.map(roomId => {\n            console.log(this.props.schedules[roomId]);\n          return (\n            <ScheduleRow\n              key={roomId}\n              roomId={roomId}\n              scheduleList={this.props.schedules[roomId]}\n              insertAction={() => {\n                console.log(\"insert\");\n              }}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  schedules: state.api.schedules,\n  currentHour: state.general.currentHour,\n  currentMinute: state.general.currentMinute,\n  targetYear: state.general.targetYear,\n  targetMonth: state.general.targetMonth,\n  targetDate: state.general.targetDate\n});\n\nexport default connect(\n  mapStateToProps,\n  { fetchAllSchedules, selectBlank, selectSchedule, updateTime, toToday }\n)(Schedules);\n","import {\n  TOGGLE_FORM_VISIBLE,\n  SELECT_BLANK,\n  SELECT_SCHEDULE,\n  CHANGE_FORM_VALUE,\n  CHANGE_EDIT_VALUE,\n  TOGGLE_ROOM_CHECK,\n  TOGGLE_ROOM_CHECK_IN_EDITING,\n  TOGGLE_EDIT_FORM\n} from \"../actions/types\";\nimport moment from \"moment\";\n\nexport const changeFormValue = (target, value) => dispatch => {\n  dispatch({\n    type: CHANGE_FORM_VALUE,\n    payload: { target: target, value, value }\n  });\n};\nexport const changeEditValue = (target, value) => dispatch => {\n  dispatch({\n    type: CHANGE_EDIT_VALUE,\n    payload: { target: target, value: value }\n  });\n};\nexport const selectBlank = (startTime, roomId) => dispatch => {\n  dispatch({\n    type: SELECT_BLANK,\n    payload: {\n      startTime: moment(startTime).format(\"YYYY-MM-DD HH:mm:00\"),\n      roomId: roomId\n    }\n  });\n};\nexport const toggleFormVisible = () => dispatch => {\n  dispatch({\n    type: TOGGLE_FORM_VISIBLE,\n    payload: {}\n  });\n};\n\nexport const toggleRoomCheck = roomId => dispatch => {\n  dispatch({\n    type: TOGGLE_ROOM_CHECK,\n    payload: roomId\n  });\n};\nexport const toggleRoomCheckInEditing = roomId => dispatch => {\n  dispatch({\n    type: TOGGLE_ROOM_CHECK_IN_EDITING,\n    payload: roomId\n  });\n};\n\nconst _constructRoomSelected = (roomIds) =>{\n  const roomSelected = {};\n  for(let i=1;i<=8;i++){\n    if(roomIds.indexOf(i)>=0){\n      roomSelected[i] = true;\n    }else{\n      roomSelected[i]=false;\n    }\n  }\n  return roomSelected;\n}\nexport const selectSchedule = uuid => dispatch => {\n  fetch(\"http://35.211.249.14/\" + uuid, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  })\n    .then(response => {\n      if (!response.ok) {\n        throw Error(response.statusText);\n      }\n      return response.json();\n    })\n    .then(responseData => {\n        console.log(responseData);\n      const data = responseData[\"schedule\"];\n      const schedule = {\n        uuid: data.uuid,\n        startTime: moment(String(data.start_time)).format(\"YYYY-MM-DD HH:mm:ss\"),\n        endTime: moment(String(data.end_time)).format(\"YYYY-MM-DD HH:mm:ss\"),\n        userName: data.user_name,\n        content: data.content,\n        created: data.created,\n        edited: data.edited,\n        roomIds:data.room_ids,\n        \n      };\n      return schedule;\n    })\n    .then(schedule => {\n      dispatch({\n        type: SELECT_SCHEDULE,\n        payload: {\n          schedule:schedule,\n          roomSelected:_constructRoomSelected(schedule.roomIds)}\n      });\n    });\n};\n\nexport const toggleEditForm = () => dispatch => {\n  dispatch({\n    type: TOGGLE_EDIT_FORM,\n    payload: {}\n  });\n};\n","import { UPDATE_TIME,SELECT_DATE,ADD_DATE,TO_TODAY } from \"./types\";\nimport moment from 'moment';\nexport const updateTime = () => dispatch => {\n  const datetime = moment();\n    dispatch({\n    type: UPDATE_TIME,\n    payload: {\n        isoWeekday:datetime.isoWeekday(),\n        year:datetime.format(\"YYYY\"),\n        month:datetime.format(\"MM\"),\n        date:datetime.format(\"DD\"),\n        hour:datetime.format(\"HH\"),\n        minute:datetime.format(\"mm\")\n    }\n  });\n};\n\nexport const selectDate = (targetDate) =>dispatch =>{\n    const targetDateMoment = moment(targetDate);\n    dispatch({\n        type:SELECT_DATE,\n        payload:{\n            year:targetDateMoment.format(\"YYYY\"),\n            month:targetDateMoment.format(\"MM\"),\n            date:targetDateMoment.format(\"DD\"),\n            isoWeekday:targetDateMoment.isoWeekday()\n        }\n    })\n}\n\nexport const addDate = (addNum,year,month,date) => dispatch =>{\n    const targetDatetime = moment().set({\n        year: year,\n        month: month - 1,\n        date: date\n      });\n      targetDatetime.add(addNum,\"day\")\n    dispatch({\n        type:ADD_DATE,\n        payload:{\n            year:targetDatetime.format(\"YYYY\"),\n            month:targetDatetime.format(\"MM\"),\n            date:targetDatetime.format(\"DD\"),\n            isoWeekday:targetDatetime.isoWeekday()\n        }\n\n    })\n}\nexport const toToday = ()=>dispatch =>{\n     const today = moment();\n     dispatch({\n         type:TO_TODAY,\n         payload:{\n             year:today.format(\"YYYY\"),\n             month:today.format(\"MM\"),\n             date:today.format(\"DD\"),\n             isoWeekday:today.isoWeekday()\n         },\n     }) \n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./stylesheets/cell.css\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\nimport Schedules from \"./containers/Schedules\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <Schedules/>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}